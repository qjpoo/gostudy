package main

func main() {
	// 读写锁
	// 如果数据不变化,就不会有临界资源的问题
	// 锁主要是为了解决临界资源的问题, 关键是写的数据,即是修改的数据.修改的数据就需要同步,其它的goroutine才能感知到
	// sync包有两种锁 sync.Mutex和sync.RWMutex  sync.Mutex 互斥锁是通过计数器功能来实现的
	// sync.RWMutex 读写互斥锁,分别针对读操作和写操作的互斥锁
	// 真真的互斥是,读取和修改,修改和修改之间,读读之间没有互斥操作
	// 任意多个读操作,同一时刻只能有一个写操作,在同一时刻写操作的时候,读操作是不允许的
	// 当一个goroutine在写操作的时候,别的goroutine即不能读也不能写
	






}
